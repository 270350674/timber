apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'me.champeau.gradle.japicmp'

configurations {
  baseline
}

android {
  compileSdkVersion versions.compileSdk

  defaultConfig {
    minSdkVersion versions.minSdk
    consumerProguardFiles 'consumer-proguard-rules.pro'
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }

  // TODO replace with https://issuetracker.google.com/issues/72050365 once released.
  libraryVariants.all {
    // TODO re-enable once https://issuetracker.google.com/issues/128749768 is figured out.
    //it.generateBuildConfig.enabled = false
  }
}

dependencies {
  api deps.kotlin.stdlib
  implementation deps.annotations

  testImplementation deps.annotations
  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation deps.robolectric

  lintChecks project(':timber-lint')

  baseline('com.jakewharton.timber:timber:4.7.1') {
    transitive = false
    force = true
  }
}

android.libraryVariants.all { variant ->
  if (variant.name != "release") {
    return
  }

  task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath = configurations.baseline.incoming.artifactView { config ->
      config.attributes {
        container -> container.attribute(Attribute.of("artifactType", String.class), "jar")
      }
    }.artifacts.artifactFiles

    // TODO query the outgoing jar in a more dynamic fashion
    newClasspath = files("$buildDir/intermediates/packaged-classes/${variant.name}/classes.jar")

    onlyBinaryIncompatibleModified = true
    failOnModification = true
    txtOutputFile = file("$buildDir/reports/japi.txt")
    ignoreMissingClasses = true
    includeSynthetic = true
  }
  japicmp.dependsOn(variant.assemble)
  check.dependsOn(japicmp)
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
